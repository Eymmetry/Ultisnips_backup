snippet lr "braket" iA
($1)
endsnippet

snippet ldr "braket" iA
[$1]
endsnippet

snippet stt "string" iA
"$1"
endsnippet

snippet main "template" bA
#define _GLIBCXX_DEBUG
#include <bits/stdc++.h>
using namespace std;
using P = pair<int,int>;
#define BUF_SIZE 256

int main(){
	$0
}
endsnippet

snippet cout "cout" iA
cout << $1 << endl;
endsnippet

snippet cin "cin" iA
cin >> $1;
endsnippet

snippet if "if" bA
if ($1) {
	$2
}
endsnippet

priority 10
snippet eif "else if" bA
else if ($1) {
	$2
}
endsnippet

priority 1
snippet else "else" bA
else{
	$1
}
endsnippet

snippet for "for" bA
for (int ${1:i} = 0; $1 < ${2:n}; $1++){
	$3
}
endsnippet

priority 10
snippet dfor
for (auto ${1:v} : $2){
	$3
}
endsnippet

snippet while "while" bA
while ($1){
	$2
}
endsnippet

priority 1
snippet int "int" bA
int $1;
endsnippet

snippet funcint "funcint" bA
int ${1:f}($2){
	$3
}
endsnippet

snippet db "double" bA
double $1;
endsnippet

snippet ll "ll" bA
ll $1;
endsnippet

snippet bool "bool" bA
bool $1;
endsnippet

snippet vec "vector" bA
vector<${1:int}> ${2:name}(${3:n});
endsnippet

priority 10
snippet dvec "dvector" bA
vector<vector<${1:int}>> ${2:name}(${3:h},vector<$1>(${4:w}));
endsnippet

priority 1
snippet fin "fileopen" bA
FILE *fp;
char buf[BUF_SIZE];

if ((fp = fopen("${1:filename}", "r")) == NULL) {
	printf("Cannot open file (%s) \n", "$1"); return 1;
}
/* r :for reading, w :for writing, */

/* Read the file */
fgets(buf, BUF_SIZE, fp);

/* example */
//sscanf(buf, "%d", &n);

/* Read the file */
//while (fgets(buf, BUF_SIZE, fp) != NULL) {
//	int a, b, c;
//	sscanf(buf, "%d %d %d", &a, &b, &c);
//}
fclose(fp);
endsnippet

snippet pf "printf" bA
printf("$1\n",$2);
endsnippet
 
priority 10
snippet fpf "fprintf" bA
fprintf(gp,"$1\n");
endsnippet

snippet spf "sprintf" bA
sprintf(str,"");
endsnippet

priority 1
snippet gp "gnuplot" bA
FILE *gp;
gp=popen("gnuplot -persist","w");
$1
fflush(gp);
fprintf(gp,"quit\n");
pclose(gp);
endsnippet

snippet att "at" iA
.at($1)
endsnippet

snippet atcoder "atcoder" bA
#include <atcoder/all>
using namespace atcoder;
endsnippet

snippet PC "physics constant" bA
const double pi = atan(1)*4.0 ;
const double e = 1.602176634e-19 ; /*elementary charge (C) */
const double G = 6.67430e-11 ; /*Newtonian constant of grabitation (m^3*kg^-1*s^-2) */
const double h = 6.62607015e-34 ; /*Planck constant (J*Hz^-1) */
const double hbq = h/(2*pi) ; /*Dirac constant (J*Hz^-1) */
const double c = 299792458 ; /*spped of light in vacuum (m*s^-1) */
const double e0 = 8.8541878128e-12 ; /*vacuum electric permittivity (F*m^-1) */
const double mu0 = 1.25663706212e-6 ; /*vacuum magnetic permeability (N*A^-2) */
const double me = 9.1093837015-31 ; /*electron mass (kg) */
const double alpha = 7.2973525693e-3 ; /*fine-structure constant () */
const double kb = 1.380649e-23 ; /*Boltzmann constant(J*K^-1) */

endsnippet


snippet '([fs]?printf.*)(ff)' "printff" wrA
`!p snip.rv = match.group(1)`%f
endsnippet

snippet '([fs]?printf.*)(dd)' "printfd" wrA
`!p snip.rv = match.group(1)`%d
endsnippet

snippet '([fs]?printf.*)(ee)' "printfe" wrA
`!p snip.rv = match.group(1)`%e
endsnippet

snippet sort "sort" bA
sort($1.begin(),$1.end());
endsnippet

snippet reverse "reverse" bA
reverse($1.begin(),$1.end());
endsnippet


snippet and "and" 
&&
endsnippet

snippet or "or" 
||
endsnippet

snippet map "map" bA
map<${1:int},${2:int}>${3:mp};
endsnippet

snippet queue "queue" bA
queue<${1:int}> ${2:q};
endsnippet

snippet stack "stack" bA
stack<${1:int}> ${2:st};
endsnippet

snippet pqueue "priority_queue" bA
//値が大きい順に取り出される。小さい順にしたかったら
//priority_queue<型, vector<型>, greater<型>> 変数名;
priority_queue<${1:int}> ${2:pq};
endsnippet

snippet set "set" bA
set<${1:int}> ${2:st};
endsnippet





